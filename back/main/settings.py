"""
Django settings for main project.

Generated by 'django-admin startproject' using Django 3.2.25.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from pathlib import Path
import os
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-gc92=1w+!@_7e0hbfq&1&x@4u4159f-()35!@yij#*i_($o%x^'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]

import os
import certifi

os.environ["SSL_CERT_FILE"] = certifi.where()

import os

# Add the following to configure media files
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')


# Application definition
# AUTH_USER_MODEL = 'mygoogle.CustomUser'

INSTALLED_APPS = [
    'daphne',
    'mygoogle',
    'rest_framework',
    'dj_rest_auth',
    'django.contrib.admin',  # Add this back
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'corsheaders',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'rest_framework.authtoken',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
    'chat',
    'two_factor.apps.TwoFactorConfig',

]
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'loggers': {
        'django.core.mail': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': True,
        },
    },
}
SITE_ID = 1
SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'APP': {
            'client_id': '598064932608-hf8f5bd6aehru3fjegblkhqpge7fnubr.apps.googleusercontent.com',
            'secret': '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',
            'key': ''
        },
        'SCOPE': [
            'profile',
            'email',
        ],
        'AUTH_PARAMS': {
            'access_type': 'online',
        }
    }
}

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',  # Move this to the top
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
     'django.middleware.csrf.CsrfViewMiddleware',  # CSRF check should come after session middleware
    'django.contrib.auth.middleware.AuthenticationMiddleware',  # Keep only one instance
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
        'allauth.account.middleware.AccountMiddleware',  # Add this line

]
LOGIN_URL = '/login-action/'
CORS_ALLOW_ALL_ORIGINS = True
CORS_ALLOWED_ORIGINS = [
    "http://localhost:8000",
]
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication', 
                'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',# Add JWT Authentication
    ],
    'DEFAULT_PERMISSION_CLASSES': [
           'rest_framework.permissions.AllowAny',  # Optional: Requires the user to be authenticated
    ],
}

ROOT_URLCONF = 'main.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [  # You can add custom directories here for other views if needed
            BASE_DIR / 'templates',
        ],
        'APP_DIRS': True,  # This is important for loading admin templates from the app
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]
# STATIC_URL = '/static/'

# # STATIC_ROOT = BASE_DIR / "static_root"
STATIC_ROOT = BASE_DIR / "static_root"

# Email Configuration
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = 'makranomar66@gmail.com'
DEFAULT_FROM_EMAIL = 'makranomar66@gmail.com'
EMAIL_HOST_PASSWORD = 'tigeyvkwoncbzixa'  # Updated from .env file

STATICFILES_DIRS = [
    BASE_DIR / '../front' / 'static',  # This should point to front/static
]


STATICFILES_DIRS = [
    BASE_DIR / '../front' / 'static',  # Frontend static files
    BASE_DIR / 'static',               # Backend static files
]

from datetime import timedelta

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=150000),  # Adjust as needed
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),  # Extend refresh token to 30 days
    'ROTATE_REFRESH_TOKENS': True,  # Issues a new refresh token upon refreshing
    'BLACKLIST_AFTER_ROTATION': True,  # Prevents old refresh tokens from being reused
}


WSGI_APPLICATION = 'main.wsgi.application'
ASGI_APPLICATION = "main.asgi.application"


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases
CSRF_COOKIE_NAME = "csrftoken"
CSRF_COOKIE_HTTPONLY = False
CSRF_COOKIE_SAMESITE = 'Lax' 

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.environ.get('POSTGRES_DB', 'postgres'),
        'USER': os.environ.get('POSTGRES_USER', 'postgres'),
        'PASSWORD': os.environ.get('POSTGRES_PASSWORD', 'postgres'),
        'HOST': os.environ.get('POSTGRES_HOST', 'db'),
        'PORT': os.environ.get('POSTGRES_PORT', '5432'),
    }
}
import os
print(os.path.join(BASE_DIR, 'front', 'static'))

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

CHANNEL_LAYERS = {
	'default' : {
		'BACKEND' : 'channels.layers.InMemoryChannelLayer',
		# 'CONFIG' : {
		# 	'hosts' : [('127.0.0.1', 6379)],
		# }
	}
}

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
)

LOGIN_REDIRECT_URL = '/'

LOGOUT_REDIRECT_URL ="/"

SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = '598064932608-hf8f5bd6aehru3fjegblkhqpge7fnubr.apps.googleusercontent.com'
SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = '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'

JWT_SECRET_KEY = 'eeebdbb90311675c7b8daf730b674f251eeeb35c2727b95d1421624380032db1'

JWT_ALGORITHM = "HS256"  # HMAC using SHA-256
JWT_EXPIRATION_SECONDS = 3600    # 1 hour